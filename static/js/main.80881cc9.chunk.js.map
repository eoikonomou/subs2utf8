{"version":3,"sources":["Components/Dropzone.jsx","Components/AppBarMenu.jsx","Containers/App.jsx","serviceWorker.js","index.jsx"],"names":["detect","require","legacy","Dropzone","props","_this","Object","D_Projects_utf8_encoding_converter_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_1__","this","D_Projects_utf8_encoding_converter_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_3__","D_Projects_utf8_encoding_converter_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4__","call","onFilesChange","evt","files","target","setState","uploadedFiles","Array","from","reset","onDownloadFile","file","reader","FileReader","onload","event","buffer","Buffer","result","possibleEncodings","encoding","find","enc","confidence","Math","max","apply","D_Projects_utf8_encoding_converter_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__","map","possibleEncoding","decode","charsetName","mode","blob","Blob","toString","type","url","window","URL","createObjectURL","tempLink","document","createElement","href","setAttribute","name","click","download","readAsArrayBuffer","state","_this2","classes","length","react__WEBPACK_IMPORTED_MODULE_6___default","a","encType","noValidate","_material_ui_core__WEBPACK_IMPORTED_MODULE_8__","variant","align","className","multiple","onChange","accept","style","textAlign","uploadedFile","index","key","concat","container","justifyContent","item","xs","sm","size","aria-label","fab","onClick","_material_ui_icons__WEBPACK_IMPORTED_MODULE_10__","button","color","React","Component","withStyles","grow","flexGrow","AppBarMenu","classCallCheck","possibleConstructorReturn","getPrototypeOf","time","moment","interval","setInterval","clearInterval","_this$props","onThemeChange","isThemeDark","react_default","index_es","position","spacing","width","userSelect","height","format","Brightness7_default","marginBottom","checked","value","Brightness3_default","themes","dark","createMuiTheme","typography","useNextVariants","palette","light","App","handleThemeChange","e","styles","theme","Components_AppBarMenu","root","padding","Boolean","location","hostname","match","ReactDOM","render","Containers_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.80881cc9.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport './Dropzone.css';\nimport {\n  Typography, withStyles, List, ListItem, Fab, Grid, Button,\n} from '@material-ui/core';\nimport { CloudDownload } from '@material-ui/icons';\n\nconst detect = require('charset-detector');\nconst legacy = require('legacy-encoding');\n\nconst styles = () => ({\n  grow: {\n    flexGrow: 1,\n  },\n});\n\nclass Dropzone extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      uploadedFiles: [],\n    };\n  }\n\n  onFilesChange = (evt) => {\n    const { files } = evt.target;\n    this.setState({ uploadedFiles: Array.from(files) });\n  }\n\n  reset = () => {\n    this.setState({ uploadedFiles: [] });\n  }\n\n  onDownloadFile = file => () => {\n    const reader = new FileReader();\n    reader.onload = (event) => {\n      let buffer = Buffer.from(event.target.result);\n      const possibleEncodings = detect(buffer);\n      const encoding = possibleEncodings\n        .find(enc => enc.confidence === Math.max(...possibleEncodings\n          .map(possibleEncoding => possibleEncoding.confidence)));\n      buffer = legacy.decode(buffer, encoding.charsetName, { mode: 'fatal' });\n      const blob = new Blob([buffer.toString()], { type: 'text/plain;charset=utf-8' });\n      const url = window.URL.createObjectURL(blob);\n\n      const tempLink = document.createElement('a');\n      tempLink.href = url;\n      tempLink.setAttribute('download', file.name);\n      tempLink.click();\n\n      this.href = url;\n      this.target = '_blank';\n\n      // target filename\n      this.download = file.name;\n    };\n    reader.readAsArrayBuffer(file);\n  }\n\n  render() {\n    const { uploadedFiles } = this.state;\n    const { classes } = this.props;\n    if (uploadedFiles.length === 0) {\n      return (\n        <form\n          encType=\"multipart/form-data\"\n          noValidate={uploadedFiles.length === 0}\n        >\n          <div>\n            <Typography variant=\"h3\" align=\"center\">Upload .srt files</Typography>\n          </div>\n          <br />\n          <div className=\"dropbox\">\n            <input\n              type=\"file\"\n              multiple\n              onChange={this.onFilesChange}\n              accept=\".srt\"\n              className=\"input-file\"\n            />\n            <p>\n              Drag your file(s) here to begin\n              <br />\n              or click to browse\n            </p>\n          </div>\n        </form>\n      );\n    }\n    return (\n      <div style={{ textAlign: 'center' }}>\n        <Typography variant=\"h3\" align=\"center\">Uploaded Files</Typography>\n        <br />\n        <List align=\"center\">\n          {uploadedFiles.map((uploadedFile, index) => (\n            <ListItem key={`uploadedFile_${uploadedFile.name + index}`}>\n              <Grid container style={{ justifyContent: 'center' }}>\n                <Grid item xs={12} sm={3}>\n                  <Typography>{`Name: ${uploadedFile.name}`}</Typography>\n                </Grid>\n                <Grid item xs={12} sm={1}>\n                  <Fab\n                    size=\"small\"\n                    aria-label=\"Delete\"\n                    className={classes.fab}\n                    onClick={this.onDownloadFile(uploadedFile)}\n                  >\n                    <CloudDownload />\n                  </Fab>\n                </Grid>\n              </Grid>\n            </ListItem>\n          ))}\n        </List>\n        <br />\n        <Button variant=\"contained\" className={classes.button} color=\"primary\" onClick={this.reset}>Cancel</Button>\n      </div>\n    );\n  }\n}\n\nDropzone.propTypes = {\n  classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(Dropzone);\n","import React, { Component } from 'react';\nimport moment from 'moment';\nimport PropTypes from 'prop-types';\nimport Brightness3Icon from '@material-ui/icons/Brightness3';\nimport Brightness7Icon from '@material-ui/icons/Brightness7';\nimport { withStyles } from '@material-ui/core/styles';\nimport {\n  AppBar,\n  Toolbar,\n  Switch,\n  Typography,\n  Grid,\n} from '@material-ui/core';\n\nconst styles = () => ({\n  grow: {\n    flexGrow: 1,\n  },\n});\n\nclass AppBarMenu extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      time: moment(),\n    };\n    this.interval = null;\n  }\n\n  componentDidMount() {\n    this.interval = setInterval(() => this.setState({ time: moment() }), 1000);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.interval);\n    this.interval = null;\n  }\n\n  render() {\n    const {\n      onThemeChange,\n      isThemeDark,\n    } = this.props;\n    const { time } = this.state;\n    return (\n      <AppBar position=\"static\">\n        <Toolbar>\n          <Grid container spacing={24} style={{ width: '100%' }}>\n            <Grid item xs={12} sm={4}>\n              <Typography variant=\"h4\" style={{ userSelect: 'none', color: 'white' }}>Subs2UTF-8 Converter</Typography>\n            </Grid>\n            <Grid item xs={12} sm={4}>\n              <Typography variant=\"h6\" className=\"v-mid\" align=\"center\" style={{ height: '100%', color: 'white' }}>\n                <strong>{time.format('dddd DD MMM YYYY - HH:mm:ss')}</strong>\n              </Typography>\n            </Grid>\n            <Grid item xs={12} sm={4}>\n              <div align=\"right\">\n                <Brightness7Icon style={{ marginBottom: -8 }} />\n                <Switch\n                  checked={isThemeDark}\n                  onChange={onThemeChange}\n                  value\n                  color=\"secondary\"\n                />\n                <Brightness3Icon style={{ marginBottom: -8 }} />\n              </div>\n            </Grid>\n          </Grid>\n        </Toolbar>\n      </AppBar>\n    );\n  }\n}\n\nAppBarMenu.propTypes = {\n  onThemeChange: PropTypes.func.isRequired,\n  isThemeDark: PropTypes.bool.isRequired,\n};\n\nexport default withStyles(styles)(AppBarMenu);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport {\n  createMuiTheme,\n  MuiThemeProvider,\n  CssBaseline,\n  Grid,\n  Typography,\n} from '@material-ui/core';\nimport AppBarMenu from '../Components/AppBarMenu';\nimport Dropzone from '../Components/Dropzone';\n\nconst themes = {\n  dark: createMuiTheme({\n    typography: {\n      useNextVariants: true,\n    },\n    palette: {\n      type: 'dark',\n    },\n  }),\n  light: createMuiTheme({\n    typography: {\n      useNextVariants: true,\n    },\n    palette: {\n      type: 'light',\n    },\n  }),\n};\n\nconst styles = () => ({\n  root: {\n    flexGrow: 1,\n  },\n});\n\nclass App extends React.Component {\n  static propTypes = {\n    classes: PropTypes.object.isRequired,\n  }\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      isThemeDark: true,\n    };\n  }\n\n  handleThemeChange = (e) => {\n    this.setState({ isThemeDark: e.target.checked });\n  }\n\n  render() {\n    const { classes } = this.props;\n    const { isThemeDark } = this.state;\n    return (\n      <MuiThemeProvider theme={themes[isThemeDark ? 'dark' : 'light']}>\n        <CssBaseline />\n        <AppBarMenu\n          onThemeChange={this.handleThemeChange}\n          isThemeDark={isThemeDark}\n        />\n        <Grid container className={classes.root} spacing={16} style={{ width: '100%', padding: 8 }}>\n          <Grid item style={{ width: '100%' }} xs={12} sm={12}>\n            <Typography variant=\"h3\" align=\"center\">Convert any .srt file encoding to UTF-8!</Typography>\n          </Grid>\n          <Grid item style={{ width: '100%' }} xs={12}>\n            <Dropzone />\n          </Grid>\n        </Grid>\n      </MuiThemeProvider>\n    );\n  }\n}\n\nexport default withStyles(styles)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Containers/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}